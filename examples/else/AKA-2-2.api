#set xor;
symbols f1/2,f2/2,f5/2,pair/2,fst/1,snd/1,macFail/0,syncFail/0,reject/0;

channels C1,C2,S1,S2;
private sqnNetA2,sqnNetA1,sqnNetB1,sqnNetB2,kA,kB,rand1,rand2;

var X,Y,B,X1,X2,
	xrand1,msg1,xmac1,ak1,xsqn1,mac1,res1,ck1,ik1,
	xrand2,msg2,xmac2,ak2,xsqn2,mac2,res2,ck2,ik2,
	akNetA1,akNetA2,akNetB1,akNetB2,
	macNetB1,macNetA1,macNetB2,macNetA2,
	autnNetA1,autnNetA2,autnNetB1,autnNetB2,
	xresNetA1,xresNetA2,xresNetB1,xresNetB2,
	resNetA1,resNetA2,resNetB1,resNetB2;

rewrite fst(pair(X, Y)) -> X;
rewrite snd(pair(X, Y)) -> Y;



MS1A = 
	in(C1,X1).
	let xrand1 = fst(X1) in
	let msg1 = fst(snd(X1)) in
	let xmac1 = snd(snd(X1)) in
	let ak1 = f5(kA,xrand1) in
	let xsqn1 = ak1 + msg1 in
	let mac1 = f1(kA,pair(xrand1,xsqn1)) in
	if xmac1 != mac1 
	then 
		out(C1,macFail) 
	else
		out(C1,f2(kA,xrand1));



MS2A =
	
	in(C2,X2).
	let xrand2 = fst(X2) in
	let msg2 = fst(snd(X2)) in
	let xmac2 = snd(snd(X2)) in
	let ak2 = f5(k,xrand2) in
	let xsqn2 = ak2 + msg2 in
	let mac2 = f1(k,pair(xrand2,xsqn2)) in
	if xmac2 != mac2 then
		out(C2,macFail)
	else
		// Here we test if there was an update
		if snd(snd(X1)) = f1(kA,pair(fst(X1),f5(kA,xrand1) + fst(snd(X1))))
		then
			//If updated, check the freshness of xsqn2
			if xsqn2 = f5(kA,xrand1) + fst(snd(X1))
			then
				out(C2,syncFail)
			else
				out(C2,f2(k,xrand2))
		else
			out(C2,f2(k,xrand2));
MS2B = 
	in(C2,X2).
	let xrand2 = fst(X2) in
	let msg2 = fst(snd(X2)) in
	let xmac2 = snd(snd(X2)) in
	let ak2 = f5(kB,xrand2) in
	let xsqn2 = ak2 + msg2 in
	let mac2 = f2(kB,pair(xrand2,xsqn2)) in
	if xmac2 != mac2 then
		out(C2,macFail)
	else
		out(C2,f2(kB,xrand2));



		


Net1A = 
	let akNetA1 = f5(kA,rand1) in
	let macNetA1 = f1(kA,pair(rand1,sqnNetA1)) in
	let autnNetA1 = pair(sqnNetA1 + akNetA1, macNetA1) in
	out(S1,pair(rand1,autnNetA1)).
	in(S1,xresNetA1).
	let resNetA1 = f2(kA,rand1) in
	if xresNetA1 != resNetA1
	then
		out(S1,reject) 
	else
		0;
Net1B = 
	let akNetB1 = f5(kB,rand1) in
	let macNetB1 = f1(kB,pair(rand1,sqnNetB1)) in
	let autnNetB1 = pair(sqnNetB1 + akNetB1, macNetB1) in
	out(S1,pair(rand1,autnNetB1)).
	in(S1,xresNetB1).
	let resNetB1 = f2(kB,rand1) in
	if xresNetB1 != resNetB1
	then
		out(S1,reject) 
	else
		0;


Net1 = Net1A || Net1B;

Net2A = 
	let akNetA2 = f5(k,rand2) in
	let macNetA2 = f1(k,pair(rand2,sqnNetA2)) in
	let autnNetA2 = pair(sqnNetA2 + akNetA2, macNetA2) in
	out(C,pair(rand2,autnNetA2)).
	in(C,xresNetA2).
	let resNetA2 = f2(k,rand2) in
	if xresNetA2 != resNetA2
	then
		out(C,reject)
	else 0;

Net2B =
	let akNetB2 = f5(k,rand2) in
	let macNetB2 = f1(k,pair(rand2,sqnNetB2)) in
	let autnNetB2 = pair(sqnNetB2 + akNetB2, macNetB2) in
	out(C,pair(rand2,autnNetB2)).
	in(C,xresNetB2).
	let resNetB2 = f2(k,rand2) in
	if xresNetB2 != resNetB2
	then
		out(C,reject)
	else 0;

Net2 = Net2A || Net2B;



Psame = (Ms1A || Net1) >> (Ms2A || Net2);
	
Pdiff = (Ms1A || Net1) >> (Ms2B || Net2);

equivalentct? Psame and Pdiff;