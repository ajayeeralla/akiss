// Private Authentication Protocol

symbols pair/2,fst/1,snd/1,adec/2,aenc/2,pk/1;

channels c;
private ka,kb,kc,Na,Nb,N,napka,napkc;

var X,Y,x,y,z;
rewrite fst(pair(X, Y)) -> X;
rewrite snd(pair(X, Y)) -> Y;
rewrite adec(aenc(X, pk(Y)), Y) -> X;

//### Description of the role of Alice

// let processAlice ka kb =
//   new Na;
//   out(c,aenc((Na,pk(ka)),pk(kb))); 
//   in(c,x).


//### Description of the role of Bob

// let processBob ka kb =
//   in(c,x); 
//   let (na,pka) = adec(x,kb) in	
//   if pka = pk(ka)
//   then new Nb; out(c,aenc((na,Nb,pk(kb)),pk(ka)))
//   else new N; out(c,aenc(N,pk(ka))).
		
//### Main

 instance1 =
  out(c,pk(ka)) . out(c,pk(kb)) . out(c,pk(kc)) .
  ( out(c,aenc(pair(Na,pk(ka)),pk(kb))).in(c,z) || in(c,x).let napka = adec(x,kb) in ([snd(napka)=pk(ka)].out(c,aenc(pair(pair(fst(napka),Nb),pk(kb)),pk(ka))) ++ [snd(napka)!=pk(ka)].out(c,aenc(N,pk(ka)))));

 instance2 =
  out(c,pk(ka)) . out(c,pk(kb)) . out(c,pk(kc)) .
  ( out(c,aenc(pair(Na,pk(kc)),pk(kb))).in(c,z) || in(c,x).let napkc = adec(x,kb) in ([snd(napkc)=pk(kc)].out(c,aenc(pair(pair(fst(napkc),Nb),pk(kb)),pk(kc))) ++ [snd(napkc)!=pk(kc)].out(c,aenc(N,pk(kc)))));
//  new ka ; new kb ; new kc ; out(c,pk(ka)) ; out(c,pk(kb)) ; out(c,pk(kc)); 
//  ( processAlice kc kb || processBob kc kb ).
  
  
//equivalence length instance1 and instance2.

equivalentct? instance1 and instance2; 
